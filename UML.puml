@startuml
class UI.ArrowKeyListener {
- PlayerController controller
- MapScreen mapScreen
+ <<Create>> ArrowKeyListener(PlayerController,MapScreen)
+ void keyPressed(KeyEvent)
}


class Dialog.StartQuest {
- String questId
+ <<Create>> StartQuest(String)
+ void execute()
}


class Dialog.Condition {
- List<Predicate<Character>> conditions
- Character character
+ <<Create>> Condition(Character)
+ <<Create>> Condition()
+ void addCondition(Predicate<Character>)
+ boolean checkAll()
+ void setCharacter(Character)
+ Character getCharacter()
+ boolean isEmpty()
}


class state.GameManager {
- GameContext gameContext
- PlayerCharacter player
- List<NPC> npcs
- MapData mapData
- PlayerController controller
+ <<Create>> GameManager()
+ void startGame()
+ void enterFight(Enemy)
+ void enterDialog(DialogInstance)
+ void returnToExplore()
}


class character.PlayerCharacter {
- QuestLog questLog
# int experience
# int skillpoints
+ <<Create>> PlayerCharacter(String,String,int,int,int,int,Inventory,Equipment)
+ <<Create>> PlayerCharacter()
+ void addExperience(int)
+ void addSkillpoint()
+ void move(int,int)
}


class UI.MapScreen {
- MapData mapData
- JTextPane mapPane
+ <<Create>> MapScreen(MapData)
+ void createScreen()
+ void renderMap()
}


class models.Equipment {
- Map<EquipmentSlot,Equippable> slots
+ void equip(Equippable)
+ void unequip(EquipmentSlot)
+ Equippable getItem(EquipmentSlot)
+ Map<EquipmentSlot,Equippable> getAllEquippedItems()
+ int getTotalDefense()
+ int getTotalAttack()
+ String toString()
}


class models.Quest {
- String id
- String name
- String description
- int experienceReward
- int goldReward
- List<Item> itemReward
+ String getId()
}


class map.GameMap {
- {static} int WIDTH
- {static} int HEIGHT
- {static} int playerX
- {static} int playerY
+ {static} void main(String[])
- {static} void move(int,int)
- {static} void printMap()
}


class Dialog.Information {
- Queue<InfoElement> elements
+ void add(InfoElement)
+ void processAll()
+ boolean isEmpty()
}


class Dialog.ReceiveItem {
- String itemName
+ <<Create>> ReceiveItem(String)
+ void execute()
}


interface item.Equippable {
~ void equip(Character)
~ EquipmentSlot getSlot()
~ int getDefense()
~ int getAttack()
~ String getName()
}

interface Dialog.InfoElement {
~ void execute()
}

class item.ItemFactory {
+ {static} Armor createArmor(String,String,String,int,int,EquipmentSlot)
}

class data.ItemLoader {
- {static} Gson gson
+ {static} List<T> loadItems(String,Type)
+ {static} List<item.Armor> loadArmorItems()
+ {static} List<item.Weapon> loadWeaponItems()
+ {static} List<item.Consumable> loadConsumableItems()
}


class UI.FightScreen {
+ void createScreen()
}

interface state.GameState {
~ void enter()
~ void update()
~ void exit()
}

class item.Armor {
- int defense
- EquipmentSlot slot
+ <<Create>> Armor(String,String,String,int,int,EquipmentSlot)
+ void equip(Character)
+ int getDefense()
+ int getAttack()
+ EquipmentSlot getSlot()
}


class UI.DialogScreen {
- JPanel dialogContainer
- JScrollPane scrollPaneDialog
- JPanel optionContainer
- JScrollPane scrollPaneOptionen
+ void createScreen()
+ void addDialog(String)
+ void addOption(String)
}


enum models.EquipmentSlot {
+  HEAD
+  CHEST
+  LEGS
+  FEET
+  ARMS
+  WEAPON
+  SHIELD
}

class Main {
+ {static} void main(String[])
}

abstract class item.Item {
# String id
# String name
# String description
# int price
# <<Create>> Item(String,String,String,int)
+ String getName()
+ int getPrice()
+ String getDescription()
+ String getId()
}


class state.FightState {
~ FightScreen fightScreen
+ <<Create>> FightState(GameManager,PlayerCharacter,Enemy)
+ void enter()
+ void update()
+ void exit()
}


class models.Inventory {
# int gold
# Map<String,Item> inventory
+ <<Create>> Inventory()
+ void addGold(int)
+ void removeGold(int)
+ void addItem(Item)
+ boolean hasItem(Item)
+ void removeItem(Item)
+ String toString()
}


class item.Consumable {
- PotionEffect effect
- int magnitude
+ <<Create>> Consumable(String,String,String,int,PotionEffect,int)
+ void use(Character)
+ PotionEffect getEffect()
+ int getMagnitude()
}


class UI.StartScreen {
+ void createScreen()
}

interface item.Usable {
~ void use(Character)
}

class item.Weapon {
- int attack
+ <<Create>> Weapon(String,String,String,int,int)
+ void equip(Character)
+ EquipmentSlot getSlot()
+ int getDefense()
+ int getAttack()
}


class UI.ModernScrollBarUI {
# void configureScrollBarColors()
# JButton createDecreaseButton(int)
# JButton createIncreaseButton(int)
- JButton createZeroButton()
# Dimension getThumbSize()
}

abstract class UI.Screen {
# JFrame frame
# JPanel panel
# Dimension displayDimensions
# Color fontColor
# Color backgroundColor
# Font headerFont
# Font normalFont
# LineBorder border
+ {abstract}void createScreen()
+ Component getFrame()
+ void closeScreen()
}


class state.ExploreState {
~ GameManager gameManager
~ PlayerCharacter player
~ MapData mapData
~ MapScreen mapScreen
~ PlayerController controller
+ <<Create>> ExploreState(GameManager,PlayerCharacter,MapData,PlayerController)
+ void enter()
+ void update()
+ void exit()
}


class data.ItemRepository {
- {static} Map<String,Armor> armorMap
- {static} Map<String,Weapon> weaponMap
- {static} Map<String,Consumable> consumableMap
+ {static} void loadAllItems()
+ {static} Armor getArmor(String)
+ {static} boolean hasArmor(String)
+ {static} Map<String,Armor> getAllArmor()
+ {static} Weapon getWeapon(String)
+ {static} boolean hasWeapon(String)
+ {static} Map<String,Weapon> getAllWeapons()
+ {static} Consumable getConsumable(String)
+ {static} boolean hasConsumable(String)
+ {static} Map<String,Consumable> getAllConsumables()
}


class map.MapData {
- int width
- int height
- char[][] tiles
+ <<Create>> MapData(int,int,List<NPC>,PlayerCharacter)
+ char[][] getTiles()
+ void printMap()
+ void updatePlayerPosition(PlayerCharacter)
+ boolean isWalkable(int,int)
}


class character.NPC {
+ <<Create>> NPC(String,String,int,int,int,int,Inventory,Equipment)
}

enum models.PotionEffect {
+  HEAL
}

class character.QuestLog {
- Map<String,Quest> activeQuests
+ void addQuest(Quest)
+ void removeQuest(String)
+ Quest getQuest(String)
+ Collection<Quest> getAllQuests()
+ boolean hasQuest(String)
}


class state.DialogState {
~ DialogScreen dialogScreen
+ <<Create>> DialogState(GameManager,DialogInstance)
+ void enter()
+ void update()
+ void exit()
}


class state.GameContext {
- {static} GameContext instance
- GameState currentState
+ <<Create>> GameContext()
+ {static} GameContext getInstance()
+ void setState(GameState)
+ void update()
}


class character.Enemy {
+ <<Create>> Enemy(String,String,int,int,int,int,Inventory,Equipment)
}

class data.CharacterLoader {
+ {static} List<NPC> loadNPCs(String)
}

class data.CharacterRepository {
- {static} Map<String,Character> characterMap
+ {static} void loadCharacters()
+ {static} Character getCharacter(String)
+ {static} boolean hasCharacter(String)
+ {static} Collection<Character> getAllCharacters()
+ {static} List<NPC> getAllNPCs()
+ {static} void clear()
}


class state.PlayerController {
- MapData mapData
- PlayerCharacter player
+ <<Create>> PlayerController(PlayerCharacter,MapData)
+ void movePlayer(int,int)
}


class Dialog.DialogInstance {
- String npc
- String description
- int priority
- boolean isPermanent
- boolean isImportant
- Condition condition
- Information information
+ <<Create>> DialogInstance(String,int,boolean,boolean,Condition,Information)
+ void run()
}


class Dialog.DialogLine {
- String id
- String text
+ <<Create>> DialogLine(String,String)
+ String getId()
+ String getText()
+ void execute()
}


abstract class character.Character {
# String name
# int x
# int y
- String guild
# int maxHp
# int currentHp
# int strength
# int dexterity
# Inventory inventory
# Equipment equipment
- Set<String> knownInfos
+ <<Create>> Character(String,String,int,int,int,int,Inventory,Equipment)
+ <<Create>> Character()
+ void equip(Armor)
+ String getName()
+ boolean knows(String)
+ void learn(String)
+ void setGuild(String)
+ String getGuild()
+ void addItem(Item)
+ boolean hasItem(Item)
+ void takeDamage(int)
+ void heal(int)
+ int getMaxHp()
+ int getDexterity()
+ Inventory getInventory()
+ Equipment getEquipment()
+ int getCurrentHp()
+ void AddToInventory(Item)
+ int getX()
+ int getY()
+ String toString()
+ void setPosition(int,int)
}




java.awt.event.KeyAdapter <|-- UI.ArrowKeyListener
Dialog.InfoElement <|.. Dialog.StartQuest
character.Character <|-- character.PlayerCharacter
UI.Screen <|-- UI.MapScreen
Dialog.InfoElement <|.. Dialog.ReceiveItem
UI.Screen <|-- UI.FightScreen
item.Equippable <|.. item.Armor
item.Item <|-- item.Armor
UI.Screen <|-- UI.DialogScreen
state.GameState <|.. state.FightState
item.Usable <|.. item.Consumable
item.Item <|-- item.Consumable
UI.Screen <|-- UI.StartScreen
item.Equippable <|.. item.Weapon
item.Item <|-- item.Weapon
javax.swing.plaf.basic.BasicScrollBarUI <|-- UI.ModernScrollBarUI
state.GameState <|.. state.ExploreState
character.Character <|-- character.NPC
state.GameState <|.. state.DialogState
character.Character <|-- character.Enemy
Dialog.InfoElement <|.. Dialog.DialogLine
@enduml